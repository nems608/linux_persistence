#!/usr/bin/python
import subprocess, random, socket, hashlib, time

FILES = ['persist']

FILES_=[
  'tutorial',
  'home',
  'cd.ico',
  'family.jpeg',
  'index.php',
  'index.html',
  'webdesign',
  'x.pixel',
  'site',
  'work',
  'computer',
  'software',
  'help',
  'cron',
  'wall',
  'test',
  'dir',
  'admin',
  'back',
  'generator',
  'jail',
  'update',
  'blog',
  'portfolio',
  'destination']

HOSTS = ['127.0.0.1']

HOSTS_ = [
  '10.0.1.1',
  '10.0.1.2',
  '10.0.1.3',
  '10.0.1.4',
  '10.0.2.1',
  '10.0.2.2',
  '10.0.2.3',
  '10.0.2.4',
  '10.0.0.254' ]



def solicit(rng):
    global HOSTS
    for host in HOSTS:
        ports = scan(host, rng)
        for port in ports:
            if check(host, port):
                print('%d:%s:%s' % (time.time(), host, port))


def check(ip, port):
    global FILES
    path = random.choice(FILES)
    expected = checksum(path)

    f = open(path, 'r')
    sock = socket.create_connection((ip, port), 2)
    sock.send(f.read())
    f.close()

    check = sock.recv(4096)
    return (check == expected)


def checksum(path):
    try:
        f = open(path, 'r')
        sha = hashlib.sha1()
        sha.update(f.read())
        f.close()
        return sha.hexdigest()
    except:
        return 0


def scan(ip, rng):
    output = subprocess.check_output('/usr/bin/nmap -sS -T4 %s -p%d-%d | grep open | grep tcp | cut -d / -f 1' % (ip, rng[0], rng[1]), shell=True)
    return output.split('\n')[:-1]


#print(scan('127.0.0.1', (5000, 6000)))
solicit((10000, 13000))
